@HostAddress = https://localhost:7001
@SupabaseUrl = <supabase-project-url>
@SupabaseKey = <supabase-public-api-key> 
@AccessToken = <jwt-access-token>

### Register a new user with Supabase
POST {{SupabaseUrl}}/auth/v1/signup
Content-Type: application/json
apikey: {{SupabaseKey}}

{
  "email": "new.user@example.com",
  "password": "secure-password",
  "data": {
    "full_name": "New User"
  }
}

### Login to Supabase and get token
# Replace email and password with your credentials
POST {{SupabaseUrl}}/auth/v1/token?grant_type=password
Content-Type: application/json
apikey: {{SupabaseKey}}

{
  "email": "your.email@example.com",
  "password": "your-password"
}

### Using response handler to automatically set the access token
# After running this request, the token will be automatically set in the environment
POST {{SupabaseUrl}}/auth/v1/token?grant_type=password
Content-Type: application/json
apikey: {{SupabaseKey}}

{
  "email": "your.email@example.com",
  "password": "your-password"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    if (response.status === 200) {
        client.log("Setting access token from response");
        client.global.set("dynamic_token", response.body.access_token);
    }
%}

### Verify token with backend (using dynamically set token)
GET {{HostAddress}}/api/v1/auth/validate-token
Authorization: Bearer {{dynamic_token}}

### Verify token with backend
GET {{HostAddress}}/api/v1/auth/validate-token
Authorization: Bearer {{AccessToken}}

### Get all Products

GET {{HostAddress}}/api/v1/products
Accept: application/json

### Create Product

POST {{HostAddress}}/api/v1/products
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{AccessToken}}

{
  "name": "World of Warcraft",
  "description": "string",
  "price": 9.99,
  "stock": 50,
  "steamLink": "string"
}
